name: Ollama DeepSeek auto‑improve
'on': workflow_dispatch

jobs:
  auto_improve:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # 1. Cache modelli
    - name: Restore Ollama cache
      uses: actions/cache@v4
      with:
        path: ~/.ollama
        key: ollama-${{ runner.os }}-deepseek-r1

    # 2. Install & serve
    - name: Install Ollama (if missing)
      run: |
        if ! command -v ollama >/dev/null 2>&1; then
          echo "Installing Ollama..."
          curl -fsSL https://ollama.com/install.sh | sh
        else
          echo "Ollama already installed, skipping installation."
        fi
    - name: Start Ollama
      run: |
        if ss -tln | grep -q ':11434'; then
          echo "Ollama already running on port 11434"
        else
          echo "Starting Ollama..."
          ollama serve &
          sleep 5
        fi

    # 3. Ensure model present (fast if cached)
    - name: Ensure deepseek model
      run: |
        if ! ollama show deepseek-r1:latest >/dev/null 2>&1; then
          echo "Model not found in cache, pulling..."
          ollama pull deepseek-r1:latest
        else
          echo "Model deepseek-r1:latest already present, skipping pull."
        fi

    # 4. Install jq (needed to parse JSON)
    - name: Install dependencies
      run: sudo apt-get update -y && sudo apt-get install -y jq

    # 5. Auto‑improve source code and push changes
    - name: DeepSeek auto‑improve
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        CHANGED=0
        # Identify source files you want to iterate on; adjust patterns as needed
        # Prefer recently changed files to keep runtime short
        # Only one improvement per run
        MAX_FILES=1
        if git rev-parse --verify -q HEAD~1 >/dev/null; then
          git diff --name-only -M -C --diff-filter=AMRT HEAD~1..HEAD -- '*.py' '*.js' '*.ts' | head -n ${MAX_FILES} > file_list.txt || true
        fi
        if [ ! -s file_list.txt ]; then
          echo "No recent changes detected; falling back to first ${MAX_FILES} source files."
          git ls-files '*.py' '*.js' '*.ts' | head -n ${MAX_FILES} > file_list.txt
        fi

        while IFS= read -r file; do
          echo "Processing $file"
          PROMPT="Act as a senior developer.\nGiven the following source file, generate a unified diff patch that adds a small, useful improvement (total added lines between 5 and 40).\nThe diff **must** start with the line 'diff --git a/$file b/$file' and contain no other commentary or markdown fences. Respond with the diff *only*."
          PAYLOAD=$(jq -n \
            --arg model "deepseek-r1:latest" \
            --arg prompt "$PROMPT" \
            --arg file "$file" \
            --rawfile code "$file" \
            '{model:$model,stream:false,options:{num_predict:256},prompt:($prompt + "\n\nFilename: " + $file + "\n```\n" + $code + "\n```")}')
          # Call DeepSeek and capture response
          RAW=$(curl -s -d "$PAYLOAD" http://localhost:11434/api/generate | jq -r '.response')
          echo "::group::DeepSeek raw response for $file"
          echo "$RAW"
          echo "::endgroup::"

          # Strip any Markdown fences ``` that DeepSeek might add
          DIFF=$(echo "$RAW" | sed '/^```/d')

          # Apply patch if it starts with a standard git diff header
          if echo "$DIFF" | grep -qE '^diff --git'; then
            echo "$DIFF" | git apply -
            CHANGED=1
          else
            echo "No usable diff returned for $file"
          fi
        done < file_list.txt

        if [[ $CHANGED -eq 1 ]]; then
          echo "Committing changes..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: automated small improvements [skip ci]"
          git push origin HEAD
        else
          echo "No changes were made."
        fi