name: Automated Ollama Code Review & Fix

# ‚ñ∂Ô∏è Quando si attiva
on:
  schedule:
    - cron: '0 * * * *'
  pull_request:
    branches: [ main ]   # si lancia su ogni PR verso main
  workflow_dispatch:      # si pu√≤ avviare a mano dal tab Actions

# ‚ñ∂Ô∏è Permessi minimi per committare e aprire PR
permissions:
  contents: write
  pull-requests: write

jobs:
  ollama_review_apply:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      # 2. Installa Ollama
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama --version

      # 3. Pre-scarica il modello (facoltativo ma pi√π veloce)
      - name: Pull model
        run: ollama pull codellama:7b-code

      # 4. Ottieni il diff della PR
      - name: Collect diff
        id: diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Prova a prendere il diff dalla pull‚Äërequest se esiste
          echo "üîé Attempting gh pr diff for ref ${GITHUB_REF##*/}"
          if gh pr diff "${GITHUB_REF##*/}" > pr.diff 2>/dev/null; then
            echo "‚úÖ PR diff collected"
          else
            echo "‚ÑπÔ∏è  No pull‚Äërequest found for branch ${GITHUB_REF##*/}; falling back to git diff against origin/main"
            git fetch origin main
            git diff origin/main...HEAD > pr.diff
          fi

          # Se il diff √® vuoto, segnalo con un marker
          if [ ! -s pr.diff ]; then
            echo "‚ö†Ô∏è  Diff is empty" && touch pr_empty
          fi

      # 5. Chiedi a Ollama di produrre una patch
      - name: Ask Ollama to propose a patch
        id: genpatch
        run: |
          export OLLAMA_NO_SPINNER=1

          BASE_PROMPT=$'Agisci come maintainer open‚Äësource esperto.\nSuggerisci miglioramenti a codice e documentazione (refactor, bug‚Äëfix, README, commenti).\nRispondi **esclusivamente** con un diff unificato **completo** e valido per `git apply`, senza testo extra n√© markdown.\nOgni blocco diff deve:\n- iniziare con `diff --git a/... b/...`\n- avere subito dopo la riga `index <hash1>..<hash2>`\n- includere le righe `--- a/...` e `+++ b/...`\n- contenere almeno un hunk `@@`\n\nL‚Äôintero output deve iniziare con `diff --git a/`.\n\n'

          if [ -f pr_empty ]; then
            echo "‚ö†Ô∏è  Nessun diff di partenza: passo a Ollama una lista ridotta di file"
            FILES=$(git ls-files | head -n 40)   # ridotto a 40 file
            FINAL_PROMPT="${BASE_PROMPT}Ecco i file attuali del repo:\n${FILES}"
          else
            DIFF_CONTENT=$(cat pr.diff)
            FINAL_PROMPT="${BASE_PROMPT}Ecco il diff corrente:\n${DIFF_CONTENT}"
          fi

          # Invia il prompt tramite stdin per evitare problemi di parsing
          printf '%s\n' "$FINAL_PROMPT" | ollama run codellama:7b-code > ollama.patch || true

          # Ripulisce eventuale testo prima del diff
          sed -n '/^diff --git /,$p' ollama.patch > _clean && mv _clean ollama.patch

          # Flagga se Ollama ha generato un vero diff
          if grep -q "^diff --git" ollama.patch; then
            echo "has_patch=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_patch=false" >> "$GITHUB_OUTPUT"
            echo "::notice ::Ollama non ha prodotto una patch utile."
            cat ollama.patch
          fi

      # 6. Applica la patch e pusha un branch
      - name: Apply patch & push branch
        id: applypatch
        if: steps.genpatch.outputs.has_patch == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Imposta created_branch a false inizialmente
          echo "created_branch=false" >> "$GITHUB_OUTPUT"
          # Verifica che la patch sia applicabile in modo pulito
          # Normalizza l'header nel caso manchino i prefissi "a/" e "b/"
          sed -E -i 's|^diff --git ([ab]/)?([^ ]+) ([ab]/)?([^ ]+)$|diff --git a/\2 b/\4|' ollama.patch
          # Filtra i blocchi diff che non contengono la riga 'index' o un hunk valido
          awk '
            /^diff --git / {print; inblock=1; next}
            inblock && /^index [0-9a-f]+\.\.[0-9a-f]+/ {print; next}
            inblock && (/^--- / || /^+++ / || /^@@ / || /^[ +-]/) {print; next}
            {inblock=0}
          ' ollama.patch > _clean && mv _clean ollama.patch
          # Primo tentativo: git apply --check
          if git apply --check ollama.patch ; then
            echo "‚úÖ Patch valida secondo git apply --check"
            APPLY_CMD="git apply ollama.patch"
          else
            echo "üîÑ git apply --check ha fallito; provo con GNU patch in dry‚Äërun"
            if patch -p1 --quiet --dry-run < ollama.patch ; then
              echo "‚úÖ Patch accettata da 'patch' ‚Äì user√≤ patch -p1"
              APPLY_CMD="patch -p1 < ollama.patch"
            else
              echo "‚ùå Patch non applicabile n√© con git apply n√© con patch; salto branch/PR."
              echo "created_branch=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # Applica la patch con il comando selezionato
          eval "$APPLY_CMD"
          git config user.name "ollama-bot"
          git config user.email "ollama-bot@users.noreply.github.com"
          git add -A
          git commit -m "chore(ollama): AI fixes & docs"
          BRANCH="ollama-fix-${{ github.run_id }}"
          echo "created_branch=true" >> "$GITHUB_OUTPUT"
          git switch -c "$BRANCH"
          git push -u origin "$BRANCH"

      # 7. Crea la pull-request con i miglioramenti
      - name: Open PR with Ollama improvements
        if: steps.applypatch.outputs.created_branch == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          branch: ollama-fix-${{ github.run_id }}
          base: main
          title: "ü§ñ Ollama automated improvements"
          body: |
            Patch generata automaticamente dal modello **codellama:7b-code**.
            Contiene bug‚Äëfix, refactor o aggiornamenti di documentazione.
          labels: ai, ollama