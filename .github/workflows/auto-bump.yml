name: Auto Bump & Fix

# ⏰ parte ogni 10 ′ (UTC) e può essere avviato a mano
on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

permissions:
  contents: write          # commit / tag / PR
  pull-requests: write
  packages: write          # per yarn publish → npm registry

concurrency:
  group: auto-bump
  cancel-in-progress: true # evita run sovrapposte

jobs:
  bump:
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout con il GITHUB_TOKEN (niente PAT da gestire)
    - uses: actions/checkout@v4

    # 2) Bump patch in package.json + tag
    #    phips28/gh-action-bump-version restituisce:
    #       newTag  (v1.2.3)  e newVersion (1.2.3)
    - id: bump
      uses: phips28/gh-action-bump-version@v11
      with:
        tag-prefix: "v"
        minor-wording: ""     # disattiva minor/major automatici
        major-wording: ""
        patch-wording: ""     # forza sempre patch
        commit-message: "chore(release): bump to {{version}}"
    #   ↑ :contentReference[oaicite:1]{index=1}

    # 3) Node + dipendenze
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: "npm"
    - run: npm ci

    # 4) ESLint / Prettier con fix automatico
    - uses: wearerequired/lint-action@v2
      with:
        eslint: true
        eslint_auto_fix: true
        prettier: true
        prettier_auto_fix: true
        commit_message: "style: lint-auto-fix"
    #   ↑ :contentReference[oaicite:2]{index=2}

    # 5) Ollama pronto in 1 riga (niente Docker)
    - uses: ai-action/setup-ollama@v1
    #   ↑ :contentReference[oaicite:3]{index=3}

    # 6) Chiedi al modello il patch diff
    - id: ai
      uses: ai-action/ollama-action@v1
      with:
        model: codellama:7b-instruct  # già pullato se cache OK
        prompt: |
          You are an AI assistant that only outputs **valid unified diffs**.
          Repo version: ${{ steps.bump.outputs.newVersion }}.
          1. Create src/feature-${{ steps.bump.outputs.newVersion }}.js
             exporting function `feature_${{ steps.bump.outputs.newVersion }}`.
          2. Append a "## Usage" section to README.md explaining how to import
             and call the new function.
          Do **not** touch any other file.
    #   ↑ :contentReference[oaicite:4]{index=4}

    # 7) Applica il diff (se esiste)
    - name: Apply patch
      run: |
        printf '%s\n' "${{ steps.ai.outputs.response }}" > patch.diff
        if [ -s patch.diff ]; then
          git apply --whitespace=fix patch.diff
        fi

    # 8) Crea PR (o aggiorna la stessa) con TUTTE le modifiche fatte dal
    #    bump-version, lint-action e Ollama.
    - uses: peter-evans/create-pull-request@v6
      with:
        commit-message: "chore(release): bump → ${{ steps.bump.outputs.newVersion }}"
        branch: auto-bump-${{ steps.bump.outputs.newVersion }}
        title: "🔼 Bump ${{ steps.bump.outputs.newVersion }} + AI patch"
        body: |
          * patch version bumped da `gh-action-bump-version`
          * fix lint/prettier automatici
          * diff generato da Ollama
        labels: automated,bump,ai
    #   ↑ :contentReference[oaicite:5]{index=5}

    # 9) Abilita auto-merge quando i check sono verdi (facoltativo)
    - uses: peter-evans/enable-pull-request-automerge@v3
      if: ${{ steps.create-pull-request.outputs.pull-request-number }}
      with:
        pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
        merge-method: squash

    # 10) Se la PR è già stata unita (merge-queue / automerge) pubblica su npm
    - name: Publish to npm
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: yarn publish --non-interactive
