name: Auto Bump & Fix

permissions:
  contents: write
  pull-requests: write

on:
  # Pianificato: ogni 10 minuti
  schedule:
    - cron: '*/10 * * * *'
  # Permette di far partire manualmente il workflow dal tab Actions
  workflow_dispatch:

jobs:
  bump-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # necessario per tag/commit history
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version
        id: bump
        run: |
          # bump patch and capture new version (e.g. "v1.2.3")
          BUMP_OUTPUT=$(npm version patch -m "chore(release): bump version to %s")
          # strip leading "v"
          VERSION=${BUMP_OUTPUT#v}
          echo "New version: $VERSION"
          # set GitHub Actions output
          echo "new-version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install & fix
        run: |
          npm install
          # esegue lint con --fix, se hai ESLint:
          npm run lint -- --fix || true
          # esegui Prettier o simili, se configurato:
          npm run format -- --write || true

      - name: Commit lint/format fixes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "chore: apply lint/format fixes" || echo "No fixes to commit"
          fi

      - name: Install DeepSeek CLI
        run: npm install -g deepseek

      - name: Download local LLM model
        run: |
          mkdir -p models
          if [ ! -f models/llm.ggml ]; then
            wget -O models/llm.ggml https://your-model-source/llm.ggml
          fi

      - name: AI Code Enhancements (local LLM)
        run: |
          echo "==> Generating patch via DeepSeek..."
          deepseek generate \
            --model models/llm.ggml \
            --system "You are an AI assistant that only outputs valid unified diffs and nothing else." \
            --user "Project version: ${{ steps.bump.outputs.new-version }}. Please generate a unified diff patch that: 1. Adds a new feature stub in src/ 2. Updates README.md with usage instructions." \
            --format diff > ai_patch.diff
          if [ -s ai_patch.diff ]; then
            echo "==> Applying patch:"
            cat ai_patch.diff
            git apply ai_patch.diff
            git add .
            git commit -m "feat(ai-local): apply deepseek patch for version ${{ steps.bump.outputs.new-version }}"
          else
            echo "⚠️ No patch generated."
          fi

      - name: Push changes & create PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          # se preferisci push diretto su main, sostituisci con actions/github-script o github-push-action
          token: ${{ secrets.GH_PAT }}
          commit-message: "chore(release): bump version to ${{ steps.bump.outputs.new-version }}"
          branch: auto-bump-${{ steps.bump.outputs.new-version }}
          title: "🔼 Bump to ${{ steps.bump.outputs.new-version }}"
          body: |
            - Version bumped automatically  
            - Lint/format fixes applied
          labels: automated, bump

      - name: Enable PR Auto-merge
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GH_PAT }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: squash

      - name: Checkout merged main
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          ref: main

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish package
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        run: yarn publish --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # -- Opzionale: se vuoi auto-merge quando CI è verde --
      # - name: Auto-merge PR
      #   uses: pascalgn/automerge-action@v0.15.4
      #   with:
      #     github_token: ${{ secrets.GH_PAT }}
      #     merge_method: squash