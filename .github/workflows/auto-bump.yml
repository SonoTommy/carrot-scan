name: Auto Bump & Fix

permissions:
  contents: write
  pull-requests: write


on:
  # Pianificato: ogni 10 minuti
  schedule:
    - cron: '*/10 * * * *'
  # Permette di far partire manualmente il workflow dal tab Actions
  workflow_dispatch:

jobs:
  bump-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # necessario per tag/commit history
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version
        id: bump
        run: |
          # bump patch and capture new version (e.g. "v1.2.3")
          BUMP_OUTPUT=$(npm version patch -m "chore(release): bump version to %s")
          # strip leading "v"
          VERSION=${BUMP_OUTPUT#v}
          SANITIZED_VERSION=${VERSION//./_}
          echo "Sanitized version: $SANITIZED_VERSION"
          echo "New version: $VERSION"
          # set GitHub Actions output
          echo "new-version=$VERSION" >> $GITHUB_OUTPUT
          echo "sanitized-version=$SANITIZED_VERSION" >> $GITHUB_OUTPUT

      - name: Install & fix
        run: |
          npm install
          # esegue lint con --fix, se hai ESLint:
          npm run lint -- --fix
          # esegui Prettier o simili, se configurato:
          npm run format -- --write

      - name: Quality & safety checks
        run: |
          # Enforce code quality â€” fail if lint errors remain
          npm run lint
          # Run unit tests if a "test" script is defined
          if npm run | grep -qE "^.* test"; then
            npm test -- --ci --bail
          fi
          # Optional strict TypeScript check
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit
          fi
          # Fail on known highâ€‘severity vulnerabilities
          npm audit --audit-level=high
          # Report unused dependencies without failing the build
          npx depcheck || true

      - name: Push changes & create PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "chore(release): bump version to ${{ steps.bump.outputs.new-version }}"
          branch: auto-bump-${{ steps.bump.outputs.new-version }}
          title: "ðŸ”¼ Bump to ${{ steps.bump.outputs.new-version }}"
          body: |
            - Version bumped automatically  
            - Lint/format fixes applied

            ## Usage

            After every automatic bump, the workflow generates a convenience stub that matches the new version number.  
            Import it and call it as shown below â€“ just replace **X.Y.Z** with the package version you are using.

            ```js
            import { featureX_Y_Z } from './src/feature-X.Y.Z.js';

            featureX_Y_Z();
            ```

            ### Scanner API

            The scanner now supports an **options** object.  
            For instance:

            ```js
            import { initScanner } from './scanner.js';

            initScanner({
              verbose: true,
              concurrency: 4
            });
            ```
          labels: |
            automated
            bump

      - name: Enable PR Auto-merge
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GH_PAT }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: squash

      - name: Checkout merged main
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          ref: main

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish package
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        run: yarn publish --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # -- Opzionale: se vuoi auto-merge quando CI Ã¨ verde --
      # - name: Auto-merge PR
      #   uses: pascalgn/automerge-action@v0.15.4
      #   with:
      #     github_token: ${{ secrets.GH_PAT }}
      #     merge_method: squash