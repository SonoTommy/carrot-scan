name: Auto Bump & Fix

permissions:
  contents: write
  pull-requests: write

on:
  # Pianificato: ogni 10 minuti
  schedule:
    - cron: '*/10 * * * *'
  # Permette di far partire manualmente il workflow dal tab Actions
  workflow_dispatch:

jobs:
  bump-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # necessario per tag/commit history
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version
        id: bump
        run: |
          # bump patch and capture new version (e.g. "v1.2.3")
          BUMP_OUTPUT=$(npm version patch -m "chore(release): bump version to %s")
          # strip leading "v"
          VERSION=${BUMP_OUTPUT#v}
          echo "New version: $VERSION"
          # set GitHub Actions output
          echo "new-version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install & fix
        run: |
          npm install
          # esegue lint con --fix, se hai ESLint:
          npm run lint -- --fix || true
          # esegui Prettier o simili, se configurato:
          npm run format -- --write || true

      - name: Download LLM model
        env:
          MODEL_URL: ${{ secrets.LLM_MODEL_URL }}
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          MODEL_FILE_NAME: ${{ secrets.LLM_MODEL_FILE_NAME }}
        run: |
          mkdir -p models
          if [ ! -f models/"$MODEL_FILE_NAME" ]; then
            echo "Downloading LLM model to models/$MODEL_FILE_NAME..."
            curl -L \
              -H "Authorization: Bearer $HUGGINGFACE_TOKEN" \
              "$MODEL_URL" \
              -o models/"$MODEL_FILE_NAME"
          fi

      - name: Start LocalAI server
        run: |
          echo "Pulling LocalAI Docker image..."
          docker pull localai/localai:master-ffmpeg-core
          echo "Starting LocalAI in detached mode..."
          docker run -d --name localai \
            -v "${{ github.workspace }}/models:/build/models" \
            -p 8080:8080 \
            localai/localai:master-ffmpeg-core
          echo "Waiting for LocalAI to be ready..."
          for i in $(seq 1 10); do
            if curl -s http://localhost:8080/health; then
              echo "LocalAI is up!"
              break
            fi
            sleep 1
          done

      - name: AI Code Enhancements via LocalAI
        run: |
          echo "==> Generating patch via LocalAI..."
          curl -s -X POST http://localhost:8080/v1/chat/completions \
            -H "Content-Type: application/json" \
            --data @- << 'EOF' | tee ai_response.json
          {
            "model": "${{ secrets.LLM_MODEL_ID }}",
            "messages": [
              {
                "role": "system",
                "content": "You are an AI assistant that only outputs valid unified diffs for a JavaScript npm package."
              },
              {
                "role": "user",
                "content": "Project version: '${{ steps.bump.outputs.new-version }}'. Please generate a unified diff patch that:\n1. Creates a new file src/feature-'${{ steps.bump.outputs.new-version }}'.js exporting a function stub named feature${{ steps.bump.outputs.new-version }}.\n2. Appends a '## Usage' section at the end of README.md explaining how to import and use this new feature.\nDo not modify any other files."
              }
            ]
          }
          EOF
          jq -r '.choices[0].message.content' ai_response.json > ai_patch.diff || true
          if [ -s ai_patch.diff ]; then
            echo "==> Applying patch"
            cat ai_patch.diff
            git apply ai_patch.diff
            git add .
            git commit -m "feat(ai-local): apply LocalAI patch for version ${{ steps.bump.outputs.new-version }}" || true
          else
            echo "⚠️ No patch generated."
          fi

      - name: Push changes & create PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          # se preferisci push diretto su main, sostituisci con actions/github-script o github-push-action
          token: ${{ secrets.GH_PAT }}
          commit-message: "chore(release): bump version to ${{ steps.bump.outputs.new-version }}"
          branch: auto-bump-${{ steps.bump.outputs.new-version }}
          title: "🔼 Bump to ${{ steps.bump.outputs.new-version }}"
          body: |
            - Version bumped automatically  
            - Lint/format fixes applied
          labels: automated, bump

      - name: Enable PR Auto-merge
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GH_PAT }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: squash

      - name: Checkout merged main
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          ref: main

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish package
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        run: yarn publish --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # -- Opzionale: se vuoi auto-merge quando CI è verde --
      # - name: Auto-merge PR
      #   uses: pascalgn/automerge-action@v0.15.4
      #   with:
      #     github_token: ${{ secrets.GH_PAT }}
      #     merge_method: squash